#!/usr/bin/env perl

# The MIT License
# 
# Copyright (c) 2016 Broad Institute
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use warnings;
use Getopt::Std;

# chromosome lengths to determine human genome build
my (%hs37, %hg19, %hg38);
%hs37 = (1=>249250621, 2=>243199373, 3=>198022430, 4=>191154276, 5=>180915260, 6=>171115067, 7=>159138663, 8=>146364022, 9=>141213431, 10=>135534747,
	11=>135006516, 12=>133851895, 13=>115169878, 14=>107349540, 15=>102531392, 16=>90354753, 17=>81195210, 18=>78077248, 19=>59128983, 20=>63025520,
	21=>48129895, 22=>51304566, X=>155270560);
%hg38 = (chr1=>248956422, chr2=>242193529, chr3=>198295559, chr4=>190214555, chr5=>181538259, chr6=>170805979, chr7=>159345973, chr8=>145138636, chr9=>138394717, chr10=>133797422,
	chr11=>135086622, chr12=>133275309, chr13=>114364328, chr14=>107043718, chr15=>101991189, chr16=>90338345, chr17=>83257441, chr18=>80373285, chr19=>58617616, chr20=>64444167,
	chr21=>46709983, chr22=>50818468, chrX=>156040895);
$hg19{"chr$_"} = $hs37{$_} for (keys %hs37);

# command lines and options
my %opts = (a=>'fb', M=>'4g', e=>.01);
getopts("a:p:Ge:M:", \%opts);

die("Usage: run-unicall [options] <ref.fa> <aln.bam> [...]
General options:
  -p FILE     call regions in BED FILE in parallel [inferred]
  -G          don't re-call genotypes from PL/GL
  -a STR      variant calling algorithm [fb]
              fb - freebayes, pp - platypus, st - samtools
              hc - GATK-HaplotypeCaller, ug - UnifiedGenotyper

FreeBayes options:
  -e FLOAT    coefficient to skip poorly mapped reads (0.01 recommended for human) [disabled]

GATK options:
  -M STR      max Java heap size [4g]

Example:
  unicall.kit/run-unicall -p hg19 -e.01 hg19.fa aln.bam > run.mak && make -j8 -f run.mak
  unicall.kit/run-unicall -p hs37 -a hc hs37d5.fa aln.bam > run.mak && make -j8 -f run.mak
") if @ARGV < 2;

my $ref = shift(@ARGV);
my $algo = $opts{a};
my @mak = ();

# check path
my $exepath = $0 =~/^\S+\/[^\/\s]+/? $0 : &which($0);
my $root = $0 =~/^(\S+)\/[^\/\s]+/? $1 : undef;
$root = $exepath =~/^(\S+)\/[^\/\s]+/? $1 : undef if !defined($root);
die "ERROR: failed to locate the root directory\n" if !defined($root);
push(@mak, "ROOT=$root");
push(@mak, 'HAPDIP=$(ROOT)/k8 $(ROOT)/hapdip.js');

# test GATK
if ($algo eq 'hc' || $algo eq 'ug') {
	die qq(ERROR: failed to locate the 'java' executable\n) unless &which('java');
	die "ERROR: failed to locate file 'GenomeAnalysisTK.jar'. Please copy it to $root.\n" unless (-f "$root/GenomeAnalysisTK.jar");
}
	
# test FASTA index
die "ERROR: failed to locate the FASTA index.\n" unless (-f "$ref.fai");
if ($algo eq 'hc' || $algo eq 'ug') {
	my $tmp = $ref;
	$tmp =~ s/\.fa(sta)?$//g;
	die qq(ERROR: failed to localte the FASTA dict file required by GATK. Run the following to generate:
       awk '{print "\@SQ\\t"SN:\$1"\\tLN:\$2"}' $ref.fai > $tmp.dict\n) unless (-f "$tmp.dict");
}
push(@mak, "REF=$ref");

# find the genome version
unless (defined $opts{p}) {
	my (%fai, $hs_build);
	open(FH, "$ref.fai") || die "ERROR: failed to open the FASTA index.\n";
	while (<FH>) {
		chomp;
		my @t = split("\t");
		$fai{$t[0]} = $t[1];
	}
	close(FH);
	if (&test_fai(\%fai, \%hg19)) { $opts{p} = 'hg19'; }
	elsif (&test_fai(\%fai, \%hs37)) { $opts{p} = 'hs37'; }
	elsif (&test_fai(\%fai, \%hg38)) { $opts{p} = 'hg38'; }
}

# read regions to parallelize
my @split = ();
if (defined $opts{p}) {
	open(FH, $opts{p} =~ /\.gz$/? "gzip -dc $opts{p} |" : $opts{p}) || open(FH, "$root/$opts{p}-regions.bed") || die "ERROR: failed to open the region BED";
	while (<FH>) {
		chomp;
		my @t = split("\t");
		push(@split, [$t[0], $t[1], $t[2]]);
	}
	close(FH);
}

# generate prefix
my (@prefix, @bam);
for (my $i = 0; $i < @ARGV; ++$i) {
	my $tmp = $ARGV[$i];
	if (-f $tmp && $tmp =~ /\.(bam|cram)$/) {
		$prefix[$i] = $bam[$i] = $tmp;
		$prefix[$i] =~ s/\.(bam|cram)$//;
	} elsif ($tmp =~ /^([^\s:]+):(\S+)/ && -f $2) {
		$prefix[$i] = $1;
		$bam[$i] = $2;
	} else {
		die "ERROR: failed to infer the prefix for input '$ARGV[$i]'\n";
	}
	unless (-f "$bam[$i].bai") {
		my $tmp = $bam[$i];
		$tmp =~ s/\.bam$/.bai/;
		die "ERROR: failed to locate the BAM index of '$bam[$i]'\n" unless (-f $tmp);
	}
}

# generate the main target
my @all_dep;
for (my $i = 0; $i < @prefix; ++$i) {
	push(@all_dep, "$prefix[$i].flt.vcf.gz.tbi");
}
push(@mak, '', "all:" . join(" ", @all_dep), '');

# generate split VCFs
for (my $i = 0; $i < @bam; ++$i) {
	my ($prefix, $bam) = ($prefix[$i], $bam[$i]);
	
	# generate raw VCF
	if (@split != 0) {
		my $line = '';
		for (my $i = 0; $i < @split; $i += 4) {
			$line .= " \\\n" if $i;
			$line .= $i == 0? "$prefix.raw.vcf.gz:" : '  ';
			for (my $j = 0; $j < 4 && $i + $j < @split; ++$j) {
				$line .= ' ' if $j;
				$line .= "$prefix.split-" . join("_", @{$split[$i+$j]}) . '.vcf';
			}
		}
		push(@mak, $line);
		push(@mak, "\t" . q[(awk '/^#/{print}!/^#/{exit}' $<; echo $^ | xargs cat | grep -v "^#") | $(ROOT)/htsbox bgzip > $@], '');
		for my $reg (@split) {
			push(@mak, &call(\%opts, $prefix, $bam, $reg));
		}
	} else {
		push(@mak, "$prefix.raw.vcf.gz:$prefix.raw.vcf");
		push(@mak, "\t" . '$(ROOT)/htsbox bgzip $<', '');
		push(@mak, &call(\%opts, $prefix, $bam));
	}
	
	# filter
	my $cmd = !defined($opts{G})? ' | $(HAPDIP) upd1gt -q' : '';
	push(@mak, "$prefix.anno.gz:$prefix.raw.vcf.gz");
	push(@mak, "\t" . '$(HAPDIP) deovlp $<' . $cmd . ' | $(HAPDIP) anno | gzip -1 > $@', '');
	push(@mak, "$prefix.flt.vcf.gz:$prefix.anno.gz");
	push(@mak, "\t" . '$(HAPDIP) filter $< | $(ROOT)/htsbox bgzip > $@', '');
	
	# tabix
	push(@mak, "$prefix.flt.vcf.gz.tbi:$prefix.flt.vcf.gz");
	push(@mak, '	$(ROOT)/htsbox tabix -pvcf $<', "");
}

# print Makefile
print join("\n", @mak), "\n";

exit(0);

sub which {
	my $file = shift;
	my $path = (@_)? shift : $ENV{PATH};
	return if (!defined($path));
	foreach my $x (split(":", $path)) {
		$x =~ s/\/$//;
		return "$x/$file" if (-x "$x/$file");
	}
	return;
}

sub test_fai {
	my $fai = shift;
	my $src = shift;
	for my $key (keys %$src) {
		return 0 if !defined($fai->{$key}) || $src->{$key} != $fai->{$key};
	}
	return 1;
}

sub call {
	my $opts = shift;
	my $prefix = shift;
	my $bam = shift;
	my $reg = shift;
	my $algo = $opts->{a};
	my $vcf = defined($reg)? "$prefix.split-" . join("_", @$reg) . ".vcf" : "$prefix.raw.vcf";
	my (@mak, $cmd);
	push(@mak, "$vcf:" . $bam);
	if ($algo eq 'hc') {
		$cmd = 'java -Xmx' . $opts{M} . ' -jar $(ROOT)/GenomeAnalysisTK.jar -T HaplotypeCaller -R $(REF) -gt_mode DISCOVERY -stand_call_conf 30 -stand_emit_conf 10 -o $@ -I $<';
		$cmd .= " -L $reg->[0]:" . ($reg->[1] + 1) . "-$reg->[2]" if defined($reg);
	} elsif ($algo eq 'ug') {
		$cmd = 'java -Xmx' . $opts{M} . ' -jar $(ROOT)/GenomeAnalysisTK.jar -T UnifiedGenotyper -R $(REF) -glm BOTH -stand_call_conf 30 -stand_emit_conf 10 -o $@ -I $<';
		$cmd .= " -L $reg->[0]:" . ($reg->[1] + 1) . "-$reg->[2]" if defined($reg);
	} elsif ($algo eq 'st') {
		$cmd = '$(ROOT)/samtools mpileup -ugf $(REF)';
		$cmd .= " -r $reg->[0]:" . ($reg->[1] + 1) . "-$reg->[2]" if defined($reg);
		$cmd .= ' $< | $(ROOT)/bcftools call -vmO v -o $@';
	} elsif ($algo eq 'fb') {
		if ($opts->{e} > 0. && $opts->{e} < 1.) {
			$cmd = '$(ROOT)/htsbox samview -l0 -e' . $opts->{e} . ' $<';
			$cmd .= " $reg->[0]:" . ($reg->[1] + 1) . "-$reg->[2]" if defined($reg);
			$cmd .= ' | $(ROOT)/freebayes -f $(REF) -P.5 /dev/stdin > $@';
		} else {
			$cmd = '$(ROOT)/freebayes -f $(REF) -P.5';
			$cmd .= " -r $reg->[0]:$reg->[1]-$reg->[2]" if defined($reg);
			$cmd .= ' $< > $@';
		}
	} elsif ($algo eq 'pp') {
		$cmd = '$(ROOT)/platypus.sh callVariants --refFile=$(REF) --bamFiles=$< --output=$@';
		$cmd .= " --region=$reg->[0]:$reg->[1]-$reg->[2]" if defined($reg);
	}
	push(@mak, "\t$cmd", "");
	return @mak;
}
